name: Deploy to Amazon EC2

on:
  push:
    branches:
      - main

# 본인이 설정한 값을 여기서 채워넣습니다.
# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: hyemsbucket
  CODE_DEPLOY_APPLICATION_NAME: my-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: my-codedeploy-deployment-group

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    # (1) 기본 체크아웃
    - name: Checkout
      uses: actions/checkout@v3

    # (2) JDK 11 세팅
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    # (3) properties 생성
    - name: make application-JWT-SECRET.properties
      run: |
          echo "ls -a . & pwd"
          pwd
          ls -a .
          echo "mkdir & touch"
          mkdir -p ./src/main/resources 
          cd ./src/main/resources
          touch ./application-JWT-SECRET.properties
          pwd
          ls -a .
          echo "copy properties"
          echo $DEV_PROP >> ./application-JWT-SECRET.properties
          cat application-JWT-SECRET.properties
      shell: bash
      env:
          DEV_PROP: ${{ secrets.JWT_SECRET }}

    - name: make application-DB-USERNAME.properties
      run: |
        echo "ls -a . & pwd"
        pwd
        ls -a .
        echo "mkdir & touch"
        mkdir -p ./src/main/resources 
        cd ./src/main/resources
        touch ./application-DB-USERNAME.properties
        pwd
        ls -a .
        echo "copy properties"
        echo $DEV_PROP >> ./application-DB-USERNAME.properties
        cat application-DB-USERNAME.properties
      env:
        DEV_PROP: ${{ secrets.DB_USERNAME }}

    - name: make application-DB-PASSWORD.properties
      run: |
        echo "ls -a . & pwd"
        pwd
        ls -a .
        echo "mkdir & touch"
        mkdir -p ./src/main/resources 
        cd ./src/main/resources
        touch ./application-DB-PASSWORD.properties
        pwd
        ls -a .
        echo "copy properties"
        echo $DEV_PROP >> ./application-DB-PASSWORD.properties
        cat application-DB-PASSWORD.properties
      shell: bash
      env:
        DEV_PROP: ${{ secrets.DB_PASSWORD }}

    - name: make application-DB-URL.properties
      run: |
        echo "ls -a . & pwd"
        pwd
        ls -a .
        echo "mkdir & touch"
        mkdir -p ./src/main/resources 
        cd ./src/main/resources
        touch ./application-DB-URL.properties
        pwd
        ls -a .
        echo "copy properties"
        echo $DEV_PROP >> ./application-DB-URL.properties
        cat application-DB-URL.properties
      shell: bash
      env:
        DEV_PROP: ${{ secrets.DB_URL }}
        
    - name: make application-S3-BUCKET.properties
      run: |
        echo "ls -a . & pwd"
        pwd
        ls -a .
        echo "mkdir & touch"
        mkdir -p ./src/main/resources 
        cd ./src/main/resources
        touch ./application-S3-BUCKET.properties
        pwd
        ls -a .
        echo "copy properties"
        echo $DEV_PROP >> ./application-S3-BUCKET.properties
        cat application-S3-BUCKET.properties
      shell: bash
      env:
        DEV_PROP: ${{ secrets.S3_BUCKET }}
        
    - name: make application-S3-SECRET.properties
      run: |
        echo "ls -a . & pwd"
        pwd
        ls -a .
        echo "mkdir & touch"
        mkdir -p ./src/main/resources 
        cd ./src/main/resources
        touch ./application-S3-SECRET.properties
        pwd
        ls -a .
        echo "copy properties"
        echo $DEV_PROP >> ./application-S3-SECRET.properties
        cat application-S3-SECRET.properties
      shell: bash
      env:
        DEV_PROP: ${{ secrets.S3_SECRET }}
        
    - name: make application-S3-ACCESS.properties
      run: |
        echo "ls -a . & pwd"
        pwd
        ls -a .
        echo "mkdir & touch"
        mkdir -p ./src/main/resources 
        cd ./src/main/resources
        touch ./application-S3-ACCESS.properties
        pwd
        ls -a .
        echo "copy properties"
        echo $DEV_PROP >> ./application-S3-ACCESS.properties
        cat application-S3-ACCESS.properties
      shell: bash
      env:
        DEV_PROP: ${{ secrets.S3_ACCESS }}
        


    # (4) Gradle build (Test 제외)
    - name: Build with Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: 7.5
        arguments: clean build -x test

    # (5) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # (6) 빌드 결과물을 S3 버킷에 업로드
    - name: Upload to AWS S3
      run: |
        aws deploy push \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --ignore-hidden-files \
          --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
          --source .
    # (7) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
    - name: Deploy to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
